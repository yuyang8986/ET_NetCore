// <auto-generated />
using System;
using ET.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ET.Infrastructure.Migrations
{
    [DbContext(typeof(ETContext))]
    [Migration("20190216031855_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.CustomerAggregate.Business", b =>
                {
                    b.Property<int>("BusinessId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("AddressCity");

                    b.Property<string>("AddressCountry");

                    b.Property<string>("AddressPostCode");

                    b.Property<string>("AddressState");

                    b.Property<string>("Phone");

                    b.Property<int>("UserId");

                    b.HasKey("BusinessId");

                    b.HasIndex("UserId");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.CustomerAggregate.Individual", b =>
                {
                    b.Property<int>("IndividualId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountUserId");

                    b.Property<int?>("BusinessId");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime>("DateTimeCreated");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("HomeAddressCity");

                    b.Property<string>("HomeAddressCountry");

                    b.Property<string>("HomeAddressPostCode");

                    b.Property<string>("HomeAddressState");

                    b.Property<string>("HomeAddressStreet");

                    b.Property<string>("HomePhone");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("Mobile");

                    b.Property<int?>("OccupationId");

                    b.Property<string>("PostalAddressCity");

                    b.Property<string>("PostalAddressCountry");

                    b.Property<string>("PostalAddressPostCode");

                    b.Property<string>("PostalAddressState");

                    b.Property<string>("PostalAddressStreet");

                    b.Property<string>("TFN");

                    b.HasKey("IndividualId");

                    b.HasIndex("AccountUserId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("OccupationId");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.CustomerAggregate.Occupation", b =>
                {
                    b.Property<int>("OccupationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("OccupationCategoryId");

                    b.HasKey("OccupationId");

                    b.HasIndex("OccupationCategoryId");

                    b.ToTable("Occupations");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.CustomerAggregate.OccupationCategory", b =>
                {
                    b.Property<int>("OccupationCategoryId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("OccupationCategoryId");

                    b.ToTable("OccupationCategories");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.CustomerAggregate.OccupationCategoryDeductionType", b =>
                {
                    b.Property<int>("DeductionTypeId");

                    b.Property<int>("OccupationCategoryId");

                    b.HasKey("DeductionTypeId", "OccupationCategoryId");

                    b.HasIndex("OccupationCategoryId");

                    b.ToTable("OccupationCategoryDeductionTypes");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.CustomerAggregate.OccupationCategoryIncomeType", b =>
                {
                    b.Property<int>("IncomeTypeId");

                    b.Property<int>("OccupationCategoryId");

                    b.HasKey("IncomeTypeId", "OccupationCategoryId");

                    b.HasIndex("OccupationCategoryId");

                    b.ToTable("OccupationCategoryIncomeTypes");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.BasicDetailsForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName");

                    b.Property<int>("AccountNo");

                    b.Property<int>("BSB");

                    b.Property<bool>("HasHELPOrTSL");

                    b.Property<bool>("HasOtherTaxDebt");

                    b.Property<bool>("HasSFSS");

                    b.Property<bool>("IsAustralianCitizenship");

                    b.Property<bool>("IsLastITRInAu");

                    b.Property<bool>("IsLiveFullYearInAu");

                    b.Property<int>("MainFormId");

                    b.HasKey("Id");

                    b.HasIndex("MainFormId")
                        .IsUnique();

                    b.ToTable("BasicDetailsForms");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.DeductionDetailsForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MainFormId");

                    b.HasKey("Id");

                    b.HasIndex("MainFormId")
                        .IsUnique();

                    b.ToTable("DeductionDetailsForms");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.DeductionTypeForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MainFormId");

                    b.HasKey("Id");

                    b.HasIndex("MainFormId")
                        .IsUnique();

                    b.ToTable("DeductionTypeForms");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.IncomeDetailsForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MainFormId");

                    b.HasKey("Id");

                    b.HasIndex("MainFormId")
                        .IsUnique();

                    b.ToTable("IncomeDetailsForms");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.IncomeTypeForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MainFormId");

                    b.HasKey("Id");

                    b.HasIndex("MainFormId")
                        .IsUnique();

                    b.ToTable("IncomeTypeForms");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.MainForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LodgementId");

                    b.HasKey("Id");

                    b.ToTable("MainForms");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.OtherItemDetailsForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MainFormId");

                    b.HasKey("Id");

                    b.HasIndex("MainFormId")
                        .IsUnique();

                    b.ToTable("OtherItemDetailsForms");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.OtherItemTypeForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MainFormId");

                    b.HasKey("Id");

                    b.HasIndex("MainFormId")
                        .IsUnique();

                    b.ToTable("OtherItemTypeForms");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.ComputerLaptopForWork", b =>
                {
                    b.Property<int>("ComputerLaptopForWorkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost");

                    b.Property<DateTime>("DateOfPurchase");

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<string>("DescriptionOfComputer");

                    b.Property<int>("PercentageForWorkUse");

                    b.Property<string>("ReasonForUseForWork");

                    b.Property<string>("TypeOfEvidence");

                    b.HasKey("ComputerLaptopForWorkId");

                    b.HasIndex("DeductionTypeDetailId");

                    b.ToTable("ComputerLaptopForWorks");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D10CostOfTaxAffairs", b =>
                {
                    b.Property<int>("D10CostOfTaxAffairsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CostForManagingTaxLastYear");

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<int>("InterestChargedByATO");

                    b.Property<int>("LegalOrLawyerCostForTaxAffairs");

                    b.HasKey("D10CostOfTaxAffairsId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("D10CostOfTaxAffairses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D11DeductibleAmountOfUndeductedPurchasePriceOfForeignPensionOrAnnuity", b =>
                {
                    b.Property<int>("D11DeductibleAmountOfUndeductedPurchasePriceOfForeignPensionOrAnnuityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("DeductionTypeDetailId");

                    b.HasKey("D11DeductibleAmountOfUndeductedPurchasePriceOfForeignPensionOrAnnuityId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("D11DeductibleAmountOfUndeductedPurchasePriceOfForeignPensionOrAnnuities");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D12PersonalSuperannuationContributions", b =>
                {
                    b.Property<int>("D12PersonalSuperannuationContributionsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<int>("DeductionAmount");

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<bool>("IsConfirmClaimDeductionAndReceivedConfirmationFromSuperFund");

                    b.Property<string>("NameOfFund");

                    b.Property<string>("SuperFundABN");

                    b.Property<string>("SuperFundTFN");

                    b.HasKey("D12PersonalSuperannuationContributionsId");

                    b.HasIndex("DeductionTypeDetailId");

                    b.ToTable("D12PersonalSuperannuationContributionses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D13DeductionForProjectPool", b =>
                {
                    b.Property<int>("D13DeductionForProjectPoolId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<int>("IndividualDeductionForProjectPool");

                    b.HasKey("D13DeductionForProjectPoolId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("D13DeductionForProjectPools");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D14ForestryManagedInvestmentSchemeDeduction", b =>
                {
                    b.Property<int>("D14ForestryManagedInvestmentSchemeDeductionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("DeductionTypeDetailId");

                    b.HasKey("D14ForestryManagedInvestmentSchemeDeductionId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("D14ForestryManagedInvestmentSchemeDeductions");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D15OtherDeductions", b =>
                {
                    b.Property<int>("D15OtherDeductionsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountOtherDeduction");

                    b.Property<int>("AmountRelatingToFinancialInvestmentsNotIncludedElseWhere");

                    b.Property<int>("AmountRelatingToRentalIncomeNotIncludedElseWhere");

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<string>("Description");

                    b.HasKey("D15OtherDeductionsId");

                    b.HasIndex("DeductionTypeDetailId");

                    b.ToTable("D15OtherDeductionses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D1WorkRelatedCarExpenses", b =>
                {
                    b.Property<int>("D1WorkRelatedCarExpensesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<bool>("DidRecordAllTripsInCarBookFor12ContinuousWeeks");

                    b.Property<bool>("HasUseCarForWorkRelatedTravel");

                    b.Property<bool>("IsCarRegisteredUnderYourName");

                    b.Property<int>("NumOfKiloMetersTravelledForWork");

                    b.Property<string>("ReasonForUseCarForWork");

                    b.HasKey("D1WorkRelatedCarExpensesId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("D1WorkRelatedCarExpenseses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D2WorkRelatedTravelExpenses", b =>
                {
                    b.Property<int>("D2WorkRelatedTravelExpensesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<bool>("IsAnyTravelAllowanceListInPAYG");

                    b.Property<int>("TotalPaid");

                    b.Property<string>("TypeOfTravelExpense");

                    b.HasKey("D2WorkRelatedTravelExpensesId");

                    b.HasIndex("DeductionTypeDetailId");

                    b.ToTable("D2WorkRelatedTravelExpenseses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D3WorkRelatedUniformClothingLaundryDryCleaning", b =>
                {
                    b.Property<int>("D3WorkRelatedUniformClothingLaundryDryCleaningId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<string>("DescriptionForAllClothing");

                    b.Property<bool>("HasBusinessLogoIfClaimUniform");

                    b.Property<bool>("HasReceipt");

                    b.Property<bool>("IsProtectiveClothingRequiredForWork");

                    b.Property<int>("TotalPaid");

                    b.Property<string>("TypeOfClothing");

                    b.HasKey("D3WorkRelatedUniformClothingLaundryDryCleaningId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("D3WorkRelatedUniformClothingLaundryDryCleanings");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D4WorkRelatedSelfEducationExpenses", b =>
                {
                    b.Property<int>("D4WorkRelatedSelfEducationExpensesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<int>("TotalAmount");

                    b.Property<string>("TypeOfConnectionForWork");

                    b.HasKey("D4WorkRelatedSelfEducationExpensesId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("D4WorkRelatedSelfEducationExpenseses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D9GiftsOrDonations", b =>
                {
                    b.Property<int>("D9GiftsOrDonationsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<bool>("HasReceipt");

                    b.Property<string>("NameOfCharities");

                    b.HasKey("D9GiftsOrDonationsId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("D9GiftsOrDonationses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.DividendDeduction", b =>
                {
                    b.Property<int>("DividendDeductionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("DeductionTypeDetailId");

                    b.HasKey("DividendDeductionId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("DividendDeductions");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.HomeOfficeExpense", b =>
                {
                    b.Property<int>("HomeOfficeExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AverageNumberOfHoursWorkedPerWeekAtHome");

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<int>("OtherDepreciationForWorkTotal");

                    b.Property<int>("PercentageOfOtherDepreciationToWork");

                    b.Property<int>("PercentageOfOtherPrintingPostageStationery");

                    b.Property<int>("PercentageOfTelephoneBillsToWork");

                    b.Property<int>("PrintingPostageStationeryForWorkTotal");

                    b.Property<int>("TelephoneCostForWorkTotal");

                    b.Property<string>("Type");

                    b.Property<string>("TypeOfEvidenceForOtherDepreciation");

                    b.Property<string>("TypeOfEvidenceForPrintingPostageStationery");

                    b.Property<string>("TypeOfEvidenceForTelephoneBills");

                    b.Property<int>("WeeksWorkedForYear");

                    b.HasKey("HomeOfficeExpenseId");

                    b.HasIndex("DeductionTypeDetailId");

                    b.ToTable("HomeOfficeExpenses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.HomeOfficeOccupancyCosts", b =>
                {
                    b.Property<int>("HomeOfficeOccupancyCostsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<string>("DetailsOfExpensesForHomeOffice");

                    b.Property<bool>("DidEmployerPaidReimbursementForAnyItems");

                    b.Property<bool>("HasDedicatedHomeOffice");

                    b.Property<bool>("HasEmployeeProvideOffice");

                    b.Property<int>("TotalAreaOfHomeOffice");

                    b.Property<int>("TotalAreaOfInsideHome");

                    b.HasKey("HomeOfficeOccupancyCostsId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("HomeOfficeOccupancyCostses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.InterestDeduction", b =>
                {
                    b.Property<int>("InterestDeductionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("DeductionTypeDetailId");

                    b.HasKey("InterestDeductionId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("InterestDeductions");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.InternetAccessExpense", b =>
                {
                    b.Property<int>("InternetAccessExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<int>("PercentageForWork");

                    b.Property<string>("ReasonForUsingInternetForWork");

                    b.Property<int>("TotalCharge");

                    b.HasKey("InternetAccessExpenseId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("InternetAccessExpenses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.LowValuePoolDeduction", b =>
                {
                    b.Property<int>("LowValuePoolDeductionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountRelatedToFinancialInvestments");

                    b.Property<int>("AmountRelatedToRentalProperties");

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<int>("OtherAmount");

                    b.Property<int>("Total");

                    b.HasKey("LowValuePoolDeductionId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("LowValuePoolDeductions");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.MobilePhoneExpense", b =>
                {
                    b.Property<int>("MobilePhoneExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<bool>("IsUsingPhoneForWork");

                    b.Property<int>("PercentageOfWorkUse");

                    b.Property<int>("TotalBilledAmount");

                    b.HasKey("MobilePhoneExpenseId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("MobilePhoneExpenses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.OtherWorkRelatedExpenses", b =>
                {
                    b.Property<int>("OtherWorkRelatedExpensesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<string>("Desciption");

                    b.Property<int>("TotalAmount");

                    b.Property<string>("Type");

                    b.Property<string>("TypeOfEvidence");

                    b.HasKey("OtherWorkRelatedExpensesId");

                    b.HasIndex("DeductionTypeDetailId");

                    b.ToTable("OtherWorkRelatedExpenseses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.ParkAndTolls", b =>
                {
                    b.Property<int>("ParkAndTollsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<bool>("HasReceipts");

                    b.Property<int>("TotalCostOfParking");

                    b.Property<int>("TotalCostOfTolls");

                    b.HasKey("ParkAndTollsId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("ParkAndTollses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.SunProtection", b =>
                {
                    b.Property<int>("SunProtectionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost");

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<string>("Description");

                    b.HasKey("SunProtectionId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("SunProtections");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.ToolAndEquipment", b =>
                {
                    b.Property<int>("ToolAndEquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddUpItemsCost300OrLess");

                    b.Property<int>("AddUpItemsCost301OrMore");

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<string>("DescriptionAboutToolRelatedToWork");

                    b.Property<string>("DescriptionForItemsCost301OrMore");

                    b.Property<int>("PercentageOfTimeForWork");

                    b.Property<string>("TypeOfEvidence");

                    b.HasKey("ToolAndEquipmentId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("ToolAndEquipments");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.UnionFees", b =>
                {
                    b.Property<int>("UnionFeesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeductionTypeDetailId");

                    b.Property<string>("TypeOfEvidence");

                    b.Property<int>("UnionFeePaid");

                    b.HasKey("UnionFeesId");

                    b.HasIndex("DeductionTypeDetailId")
                        .IsUnique();

                    b.ToTable("UnionFeeses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.AAASIS", b =>
                {
                    b.Property<int>("AAASISId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessableAmountFromCappedDefinedBenefitIncomeStream");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("LumpSumInArrearsTaxed");

                    b.Property<int>("LumpSumInArrearsUnTaxed");

                    b.Property<int>("TaxWithHeld");

                    b.Property<int>("TaxableComponentTaxed");

                    b.Property<int>("TaxableComponentUnTaxed");

                    b.HasKey("AAASISId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("Aaasiss");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.AGA", b =>
                {
                    b.Property<int>("AGAId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("TaxWithHeld");

                    b.Property<int>("TotalAllowance");

                    b.Property<string>("Type");

                    b.HasKey("AGAId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("Agas");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.AGP", b =>
                {
                    b.Property<int>("AGPId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("TaxWithHeld");

                    b.Property<int>("TotalAmount");

                    b.Property<string>("Type");

                    b.HasKey("AGPId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("Agps");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.Allowance", b =>
                {
                    b.Property<int>("AllowanceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllowanceType");

                    b.Property<int>("Amount");

                    b.Property<int>("IncomeTypeDetailId");

                    b.HasKey("AllowanceId");

                    b.HasIndex("IncomeTypeDetailId");

                    b.ToTable("Allowances");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.APSI", b =>
                {
                    b.Property<int>("APSIId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("TaxWithHeld");

                    b.Property<int>("Total");

                    b.HasKey("APSIId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("Apsis");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.ASLSP", b =>
                {
                    b.Property<int>("ASLSPId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfPayment");

                    b.Property<string>("Desciption");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<string>("PayerABN");

                    b.Property<int>("TaxWithHeld");

                    b.Property<int>("TaxableComponentTaxedElement");

                    b.Property<int>("TaxableComponentUntaxedElement");

                    b.HasKey("ASLSPId");

                    b.HasIndex("IncomeTypeDetailId");

                    b.ToTable("Aslsps");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.BankInterest", b =>
                {
                    b.Property<int>("BankInterestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("Tax");

                    b.Property<int>("Total");

                    b.HasKey("BankInterestId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("BankInterests");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.BFLICAFS", b =>
                {
                    b.Property<int>("BFLICAFSId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BonusFromLifeInsuranceCompaniesAndFriendlySocieties");

                    b.Property<int>("IncomeTypeDetailId");

                    b.HasKey("BFLICAFSId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("Bflicafss");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.CapitalGainOrLosses", b =>
                {
                    b.Property<int>("CapitalGainOrLossesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreditForForeignResidentCapitalGainsWithholding");

                    b.Property<string>("ExemptionOrRollOverCodeIfAny");

                    b.Property<bool>("HasAppliedExemptionOrRollover");

                    b.Property<bool>("HasCGTEventThisYear");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("NetCapitalGain");

                    b.Property<int>("NetCapitalLossCarriedForwardToLaterIncomeYears");

                    b.Property<int>("TotalCurrentYearCG");

                    b.HasKey("CapitalGainOrLossesId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("CapitalGainOrLosseses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.DeferredNonCommercialBusinessLosses", b =>
                {
                    b.Property<int>("DeferredNonCommercialBusinessLossesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeferredLossesFromSoleTraderActivities");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("NonPrimaryProductionDeferredLosses");

                    b.Property<int>("PrimaryProductionDeferredLosses");

                    b.Property<int>("ShareOfDeferredLossesFromPartnershipActivities");

                    b.Property<int>("ShareOfDeferredLossesFromPartnershipCarryingBusinessOfInvesting");

                    b.Property<int>("ShareOfDeferredLossesFromPartnershipOthers");

                    b.Property<int>("ShareOfDeferredLossesFromPartnershipRentalBusiness");

                    b.HasKey("DeferredNonCommercialBusinessLossesId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("DeferredNonCommercialBusinessLosseses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.Dividends", b =>
                {
                    b.Property<int>("DividendsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Franked");

                    b.Property<int>("FrankingCredit");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("TFNWithHeld");

                    b.Property<int>("Unfranked");

                    b.HasKey("DividendsId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("Dividendses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.ELSP", b =>
                {
                    b.Property<int>("ELSPId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountA");

                    b.Property<string>("Code");

                    b.Property<int>("FullAmountB");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("TaxWithHeld");

                    b.HasKey("ELSPId");

                    b.HasIndex("IncomeTypeDetailId");

                    b.ToTable("Elsps");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.EmployeeShareSchemes", b =>
                {
                    b.Property<int>("EmployeeShareSchemesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DFTUFSEligibleForReductionAmount");

                    b.Property<int>("DFTUFSNotEligibleForReductionAmount");

                    b.Property<int>("DiscountESSIntBef172009");

                    b.Property<int>("DiscountFromDeferralSchemes");

                    b.Property<int>("ESSTFNAmountsWithHeldFromDiscounts");

                    b.Property<int>("ForeignSourceDiscounts");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("TotalAssesableDiscountAmout");

                    b.HasKey("EmployeeShareSchemesId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("EmployeeShareSchemeses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.ETP", b =>
                {
                    b.Property<int>("ETPId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ABN");

                    b.Property<string>("Code");

                    b.Property<DateTime>("DateOfPayment");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("TaxWithHeld");

                    b.Property<int>("TaxableComponent");

                    b.HasKey("ETPId");

                    b.HasIndex("IncomeTypeDetailId");

                    b.ToTable("Etps");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.FMISI", b =>
                {
                    b.Property<int>("FMISIId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("IncomeTypeDetailId");

                    b.HasKey("FMISIId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("Fmisis");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.ForeignEntities", b =>
                {
                    b.Property<int>("ForeignEntitiesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CFCIncome");

                    b.Property<bool>("HasCausedTransferOfPropertyOrServiceToNonResidentTrustEstate");

                    b.Property<bool>("HasDirectOrInDirectInterestInCFC");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("TransferTrustIncome");

                    b.HasKey("ForeignEntitiesId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("ForeignEntitieses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.ForeignSourceIncome", b =>
                {
                    b.Property<int>("ForeignSourceIncomeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessableForeignSourceIncome");

                    b.Property<int>("ExemptForeignEmploymentIncome");

                    b.Property<int>("ForeignIncomeTaxOffset");

                    b.Property<int>("FrankingCreditsFromNewZealandFrankingCompany");

                    b.Property<int>("HasInterestEarnedInAssestOutsideAUMoreThan5000AUD");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<bool>("IsNetForeignEmploymenyIncomePaymenySummaryProfit");

                    b.Property<bool>("IsNetForeignPensionWithUndeductedPurchasePriceProfit");

                    b.Property<bool>("IsNetForeignPensionWithoutUndeductedPurchasePriceProfit");

                    b.Property<bool>("IsNetForeignRentProfit");

                    b.Property<bool>("IsOtherNetForeignEmploymentIncomeProfit");

                    b.Property<bool>("IsOtherNetForeignIncomeProfit");

                    b.Property<int>("IsOtherNetForeignSourceIncomeProfit");

                    b.Property<int>("NetForeignEmploymenyIncomePaymenySummary");

                    b.Property<int>("NetForeignPensionWithUndeductedPurchasePrice");

                    b.Property<int>("NetForeignPensionWithoutUndeductedPurchasePrice");

                    b.Property<int>("NetForeignRent");

                    b.Property<int>("NonResidentForeignIncome");

                    b.Property<int>("OtherNetForeignEmploymentIncome");

                    b.Property<int>("OtherNetForeignIncome");

                    b.Property<int>("OtherNetForeignSourceIncome");

                    b.HasKey("ForeignSourceIncomeId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("ForeignSourceIncomes");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.NetFarmManagementDepositOrRepayments", b =>
                {
                    b.Property<int>("NetFarmManagementDepositOrRepaymentsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeductibleDeposits");

                    b.Property<int>("EarlyRepaymentsNaturalDisasterAndDrought");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<bool>("IsNetIncomeEqualisationProfit");

                    b.Property<int>("NetFarmManagementDepositsOrRepayments");

                    b.Property<int>("OtherRepayment");

                    b.HasKey("NetFarmManagementDepositOrRepaymentsId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("NetFarmManagementDepositOrRepaymentses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.NetIncomeOrLossFromBusiness", b =>
                {
                    b.Property<int>("NetIncomeOrLossFromBusinessId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<bool>("IsNetIncomeOrLossFromBusinessAmountProfit");

                    b.Property<bool>("IsNetIncomeOrLossFromRentalPropertyBusinessProfit");

                    b.Property<bool>("IsOtherIncomeOrLossToItem15");

                    b.Property<int>("NetIncomeLossFromBusinessTaxWithheldABNNotQuoted");

                    b.Property<int>("NetIncomeLossFromBusinessTaxWithheldForeignResidentWithholdingExcludingCG");

                    b.Property<int>("NetIncomeLossFromBusinessTaxWithheldLabourHireOrOtherSpecifiedPayments");

                    b.Property<int>("NetIncomeLossFromBusinessTaxWithheldVoluntaryAgreement");

                    b.Property<int>("NetIncomeOrLossFromBusinessAmount");

                    b.Property<int>("NetIncomeOrLossFromRentalPropertyBusiness");

                    b.Property<int>("NetSmallBusinessIncome");

                    b.Property<int>("OtherIncomeOrLossToItem15");

                    b.HasKey("NetIncomeOrLossFromBusinessId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("NetIncomeOrLossFromBusinesses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.NonIndividualPaymentSummary", b =>
                {
                    b.Property<int>("NonIndividualPaymentSummaryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GrossPayment");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<string>("NatureOfIncomeType");

                    b.Property<int?>("P1PersonalServicesIncomeId");

                    b.Property<string>("PayerABNOrWithHoldingPayerNumber");

                    b.Property<string>("PayerName");

                    b.Property<int>("TaxWithheld");

                    b.Property<string>("Type");

                    b.HasKey("NonIndividualPaymentSummaryId");

                    b.HasIndex("IncomeTypeDetailId");

                    b.HasIndex("P1PersonalServicesIncomeId");

                    b.ToTable("NonIndividualPaymentSummary");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.OtherIncome", b =>
                {
                    b.Property<int>("OtherIncomeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessableBalancingAdjustmentForLowValuePoolDeductionRelationToFinancialInvestments");

                    b.Property<int>("AssessableBalancingAdjustmentForLowValuePoolDeductionRelationToRentalProperty");

                    b.Property<int>("IncomeFromFinancialInvestmentNotIncludedAtAnotherLabel");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<string>("OneActionCode");

                    b.Property<int>("OtherCategory3Income");

                    b.Property<int>("OtherCategoryOneIncome");

                    b.Property<int>("OtherCategoryThreeAmount");

                    b.Property<string>("OtherCategoryThreeCode");

                    b.Property<string>("OtherCategoryThreeDescription");

                    b.Property<int>("OtherCategoryTwoIncomeATOInterest");

                    b.Property<int>("TaxWithHeldLumpSumPaymentInArrears");

                    b.Property<int>("TaxableProfessionalIncome");

                    b.HasKey("OtherIncomeId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("OtherIncomes");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P10SmallBusinessEntityDepreciatingAssets", b =>
                {
                    b.Property<int>("P10SmallBusinessEntityDepreciatingAssetsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("SmallBusinessEntitySimplifiedDepreciationDeductionForCertainAssets");

                    b.Property<int>("SmallBusinessEntitySimplifiedDepreciationDeductionForGeneralSmallBusinessPool");

                    b.HasKey("P10SmallBusinessEntityDepreciatingAssetsId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P10SmallBusinessEntityDepreciatingAssetses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P11TradeDebtors", b =>
                {
                    b.Property<int>("P11TradeDebtorsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("IncomeTypeDetailId");

                    b.HasKey("P11TradeDebtorsId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P11TradeDebtorses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P12TradeCreditors", b =>
                {
                    b.Property<int>("P12TradeCreditorsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("IncomeTypeDetailId");

                    b.HasKey("P12TradeCreditorsId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P12TradeCreditorses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P13TotalSalaryAndWageExpenses", b =>
                {
                    b.Property<int>("P13TotalSalaryAndWageExpensesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<string>("Code");

                    b.Property<int>("IncomeTypeDetailId");

                    b.HasKey("P13TotalSalaryAndWageExpensesId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P13TotalSalaryAndWageExpenseses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P14PaymentsToAssociatedPersons", b =>
                {
                    b.Property<int>("P14PaymentsToAssociatedPersonsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("IncomeTypeDetailId");

                    b.HasKey("P14PaymentsToAssociatedPersonsId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P14PaymentsToAssociatedPersonses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P15IntangibleDepreciatingAssetsFirstDeducted", b =>
                {
                    b.Property<int>("P15IntangibleDepreciatingAssetsFirstDeductedId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("IncomeTypeDetailId");

                    b.HasKey("P15IntangibleDepreciatingAssetsFirstDeductedId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P15IntangibleDepreciatingAssetsFirstDeducteds");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P16OtherDepreciatingAssetsFirstDeducted", b =>
                {
                    b.Property<int>("P16OtherDepreciatingAssetsFirstDeductedId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("IncomeTypeDetailId");

                    b.HasKey("P16OtherDepreciatingAssetsFirstDeductedId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P16OtherDepreciatingAssetsFirstDeducteds");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P17TerminationValueOfIntangibleDepreciatingAsset", b =>
                {
                    b.Property<int>("P17TerminationValueOfIntangibleDepreciatingAssetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("IncomeTypeDetailId");

                    b.HasKey("P17TerminationValueOfIntangibleDepreciatingAssetId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P17TerminationValueOfIntangibleDepreciatingAssets");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P18TerminationValueOfOtherDepreciatingAssets", b =>
                {
                    b.Property<int>("P18TerminationValueOfOtherDepreciatingAssetsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("IncomeTypeDetailId");

                    b.HasKey("P18TerminationValueOfOtherDepreciatingAssetsId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P18TerminationValueOfOtherDepreciatingAssetses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P19TradingStockElection", b =>
                {
                    b.Property<int>("P19TradingStockElectionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Election");

                    b.Property<int>("IncomeTypeDetailId");

                    b.HasKey("P19TradingStockElectionId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P19TradingStockElections");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P1PersonalServicesIncome", b =>
                {
                    b.Property<int>("P1PersonalServicesIncomeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeductionforPaymentsToAssociatesForPrincipalWork");

                    b.Property<bool>("HasReceivedPSIDeterminationForceForWholePeriod");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<bool>("IsPSIMoreThanEightyPercentOfAllIncome");

                    b.Property<bool>("IsSatisfyBusinessPremisesTest");

                    b.Property<bool>("IsSatisfyEmploymentTest");

                    b.Property<bool>("IsSatisfyResultTest");

                    b.Property<bool>("IsSatisfyUnRelatedClientsTest");

                    b.Property<int>("PSDIABNNotQuoted");

                    b.Property<int>("PSILabourHireOrOtherSpecifiedPayments");

                    b.Property<int>("PSIOther");

                    b.Property<int>("PSIVoluntaryAgreement");

                    b.Property<int>("TotalAmountOfOtherDeductionsAgainstPSI");

                    b.HasKey("P1PersonalServicesIncomeId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P1PersonalServicesIncomes");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P2DescriptionOfMainBusinessOrProfessionalActivity", b =>
                {
                    b.Property<int>("P2DescriptionOfMainBusinessOrProfessionalActivityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<string>("IndustryCode");

                    b.HasKey("P2DescriptionOfMainBusinessOrProfessionalActivityId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P2DescriptionOfMainBusinessOrProfessionalActivities");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P4StatusOfBusiness", b =>
                {
                    b.Property<int>("P4StatusOfBusinessId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("IncomeTypeDetailId");

                    b.HasKey("P4StatusOfBusinessId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P4StatusOfBusinesses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P5BusinessNameOfMainBusinessAndABN", b =>
                {
                    b.Property<int>("P5BusinessNameOfMainBusinessAndABNId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ABN");

                    b.Property<string>("BusinessNameOfMainBusiness");

                    b.Property<int>("IncomeTypeDetailId");

                    b.HasKey("P5BusinessNameOfMainBusinessAndABNId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P5BusinessNameOfMainBusinessAndAbns");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P7GSTByInternet", b =>
                {
                    b.Property<int>("P7GSTByInternetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<bool>("IsSellingGoodOrServiceUsingInternet");

                    b.HasKey("P7GSTByInternetId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P7GstByInternets");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P8BusinessIncomeAndExpensesFarming", b =>
                {
                    b.Property<int>("P8BusinessIncomeAndExpensesFarmingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllOtherExpenses");

                    b.Property<int>("AssessableGovernmentIndustryPayment");

                    b.Property<string>("AssessableGovernmentIndustryPaymentActionCode");

                    b.Property<int>("BadDebts");

                    b.Property<int>("BusinessDeductionForProjectPool");

                    b.Property<int>("ClosingStock");

                    b.Property<string>("ClosingStockCode");

                    b.Property<int>("ContractorSubContractorAndCommissionExpenses");

                    b.Property<int>("DeferredNonCommercialLossesFromAPriorYear");

                    b.Property<int>("DepreciationExpenses");

                    b.Property<int>("ExpenseReconAdjustment");

                    b.Property<int>("GrossABNNotQuoted");

                    b.Property<int>("GrossLabourHireOrOther");

                    b.Property<int>("GrossVoluntaryAgreement");

                    b.Property<int>("IncomeReconciliationAdjustments");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("InterestExpensesOversea");

                    b.Property<bool>("IsExpenseReconAdjustmentProfit");

                    b.Property<bool>("IsIncomeReconciliationAdjustmentsProfit");

                    b.Property<bool>("IsOtherBusinessIncomeProfit");

                    b.Property<int>("LandCareOperationsAndBusinessDeductionForDeclineInValueOfWaterFacility");

                    b.Property<int>("LeaseExpenses");

                    b.Property<string>("MotorVehicleExpenseActionCode");

                    b.Property<int>("MotorVehicleExpenses");

                    b.Property<int>("OpeningStock");

                    b.Property<int>("OtherBusinessIncome");

                    b.Property<int>("PurchasesAndOtherCosts");

                    b.Property<int>("RentExpenses");

                    b.Property<int>("RepairsAndMaintenance");

                    b.Property<int>("Section40880Deduction");

                    b.HasKey("P8BusinessIncomeAndExpensesFarmingId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P8BusinessIncomeAndExpensesFarmings");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P8BusinessIncomeAndExpensesNonFarming", b =>
                {
                    b.Property<int>("P8BusinessIncomeAndExpensesNonFarmingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllOtherExpenses");

                    b.Property<int>("AssessableGovernmentIndustryPayment");

                    b.Property<string>("AssessableGovernmentIndustryPaymentActionCode");

                    b.Property<int>("BadDebts");

                    b.Property<int>("BusinessDeductionForProjectPool");

                    b.Property<int>("ClosingStock");

                    b.Property<string>("ClosingStockCode");

                    b.Property<int>("ContractorSubContractorAndCommissionExpenses");

                    b.Property<int>("DeferredNonCommercialLossesFromAPriorYear");

                    b.Property<int>("DepreciationExpenses");

                    b.Property<int>("ExpenseReconAdjustment");

                    b.Property<int>("GrossABNNotQuoted");

                    b.Property<int>("GrossLabourHireOrOther");

                    b.Property<int>("GrossSubjectToForeignResidentWithHoldingExcludingCapitalGains");

                    b.Property<int>("GrossVoluntaryAgreement");

                    b.Property<int>("IncomeReconciliationAdjustments");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("InterestExpensesOversea");

                    b.Property<bool>("IsExpenseReconAdjustmentProfit");

                    b.Property<bool>("IsIncomeReconciliationAdjustmentsProfit");

                    b.Property<bool>("IsOtherBusinessIncomeProfit");

                    b.Property<int>("LandCareOperationsAndBusinessDeductionForDeclineInValueOfWaterFacility");

                    b.Property<int>("LeaseExpenses");

                    b.Property<string>("MotorVehicleExpenseActionCode");

                    b.Property<int>("MotorVehicleExpenses");

                    b.Property<int>("OpeningStock");

                    b.Property<int>("OtherBusinessIncome");

                    b.Property<int>("PurchasesAndOtherCosts");

                    b.Property<int>("RentExpenses");

                    b.Property<int>("RepairsAndMaintenance");

                    b.Property<int>("Section40880Deduction");

                    b.HasKey("P8BusinessIncomeAndExpensesNonFarmingId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P8BusinessIncomeAndExpensesNonFarmings");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P9BusinessLossActivity", b =>
                {
                    b.Property<int>("P9BusinessLossActivityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeferredNonCommercialLossFromAPriorYear");

                    b.Property<string>("DescriptionOfActivity");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<string>("IndustryCode");

                    b.Property<int>("NetLossAmount");

                    b.Property<int>("Number");

                    b.Property<string>("PartnershipOrSoleTraderOrNone");

                    b.Property<string>("ReferenceForCodeFive");

                    b.Property<string>("TypeOfLoss");

                    b.Property<int>("Year");

                    b.HasKey("P9BusinessLossActivityId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("P9BusinessLossActivities");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.PartnershipsAndTrusts", b =>
                {
                    b.Property<int>("PartnershipsAndTrustsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DistributionFromPartnerships");

                    b.Property<int>("DistributionFromTrusts");

                    b.Property<string>("DistributionFromTrustsCode");

                    b.Property<int>("DistributionFromTrustsLessNetCGAndFI");

                    b.Property<string>("DistributionFromTrustsLessNetCGAndFICode");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<bool>("IsDistributionFromTrustsLessNetCGAndFIProfit");

                    b.Property<bool>("IsDistributionProfit");

                    b.Property<bool>("IsNonPPDistributionProfit");

                    b.Property<bool>("IsNonPPOtherDistributionProfit");

                    b.Property<bool>("IsNonPPShareOfNetIncomeFromTrustsLessOthersProfit");

                    b.Property<bool>("IsNonPPShareProfit");

                    b.Property<int>("LandCareOperationsAndDeductionForDeclineInValue");

                    b.Property<int>("NonPPDistribution");

                    b.Property<int>("NonPPOtherDistribution");

                    b.Property<int>("NonPPShare");

                    b.Property<int>("NonPPShareOfNetIncomeFromTrustsLessOthers");

                    b.Property<string>("OtherDeductionCode");

                    b.Property<int>("OtherDeductionsRelatedToDistribution");

                    b.HasKey("PartnershipsAndTrustsId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("PartnershipsAndTrustses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.PAYGSummary", b =>
                {
                    b.Property<int>("PAYGSummaryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ABN")
                        .IsRequired();

                    b.Property<int>("GrossPayment");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<string>("Note");

                    b.Property<string>("PayerName")
                        .IsRequired();

                    b.Property<int>("TotalTaxWithHeld");

                    b.HasKey("PAYGSummaryId");

                    b.HasIndex("IncomeTypeDetailId");

                    b.ToTable("PaygSummaries");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.PersonalServiceIncome", b =>
                {
                    b.Property<int>("PersonalServiceIncomeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("TaxWithHeldABNNotQuoted");

                    b.Property<int>("TaxWithHeldLabourHireOrOtherSpecifiedPayments");

                    b.Property<int>("TaxWithHeldVoluntaryAgreement");

                    b.HasKey("PersonalServiceIncomeId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("PersonalServiceIncomes");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.Rent", b =>
                {
                    b.Property<int>("RentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CapitalWorksDeduction");

                    b.Property<int>("GrossRent");

                    b.Property<int>("IncomeTypeDetailId");

                    b.Property<int>("InterestDeduction");

                    b.Property<int>("OtherRentalDeductions");

                    b.HasKey("RentId");

                    b.HasIndex("IncomeTypeDetailId")
                        .IsUnique();

                    b.ToTable("Rent");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.A1Under18", b =>
                {
                    b.Property<int>("A1Under18Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<string>("Code");

                    b.Property<int>("OtherItemTypeDetailId");

                    b.HasKey("A1Under18Id");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("A1Under18s");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.A2PartYearTaxFreeThreshold", b =>
                {
                    b.Property<int>("A2PartYearTaxFreeThresholdId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NumberOfMonthsEligible");

                    b.Property<int>("OtherItemTypeDetailId");

                    b.Property<DateTime>("ThresHoldDate");

                    b.HasKey("A2PartYearTaxFreeThresholdId");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("A2PartYearTaxFreeThresholds");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.A3SuperCoContribution", b =>
                {
                    b.Property<int>("A3SuperCoContributionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncomeFromInvestmentPartnershipAndOtherSourcesAmount");

                    b.Property<int>("OtherDeductionsFromBusinessIncome");

                    b.Property<int>("OtherIncomeFromEmploymentAndBusiness");

                    b.Property<int>("OtherItemTypeDetailId");

                    b.Property<string>("SuperannuationCoContributionsIndicator");

                    b.HasKey("A3SuperCoContributionId");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("A3SuperCoContributions");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.A4WorkingHolidayMakerNetIncome", b =>
                {
                    b.Property<int>("A4WorkingHolidayMakerNetIncomeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("OtherItemTypeDetailId");

                    b.HasKey("A4WorkingHolidayMakerNetIncomeId");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("A4WorkingHolidayMakerNetIncomes");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.DependencyChildren", b =>
                {
                    b.Property<int>("DependencyChildrenId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NumberOfChildren");

                    b.Property<int>("OtherItemTypeDetailId");

                    b.HasKey("DependencyChildrenId");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("DependencyChildrens");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.IncomeTests", b =>
                {
                    b.Property<int>("IncomeTestsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IT1Amount");

                    b.Property<int>("IT2Amount");

                    b.Property<int>("IT3Amount");

                    b.Property<int>("IT4Amount");

                    b.Property<int>("IT5Amount");

                    b.Property<int>("IT6Amount");

                    b.Property<int>("IT7Amount");

                    b.Property<int>("OtherItemTypeDetailId");

                    b.HasKey("IncomeTestsId");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("IncomeTestses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.L1TaxLossesOfEarlierIncomeYearsClaimedThisIncomeYear", b =>
                {
                    b.Property<int>("L1TaxLossesOfEarlierIncomeYearsClaimedThisIncomeYearId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NonPrimaryProductionLossesCarriedForwardFromEarlierIncomeYears");

                    b.Property<int>("NonPrimaryProductionLossesCarriedThisIncomeYear");

                    b.Property<int>("OtherItemTypeDetailId");

                    b.Property<int>("PrimarProductionLossesClaimedThisIncomeYear");

                    b.Property<int>("PrimaryProductionLossesCarriedForwardFromEarlierIncomeYears");

                    b.Property<int>("TaxableIncomeOrLoss");

                    b.HasKey("L1TaxLossesOfEarlierIncomeYearsClaimedThisIncomeYearId");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("L1TaxLossesOfEarlierIncomeYearsClaimedThisIncomeYears");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.M1MedicareLevyReductionOrExemption", b =>
                {
                    b.Property<int>("M1MedicareLevyReductionOrExemptionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NumberOfDaysFullLevyExemption");

                    b.Property<string>("NumberOfDaysFullLevyExemptionActionCode");

                    b.Property<int>("NumberOfDaysHalfLevyExemption");

                    b.Property<int>("NumberOfDependentChildrenAndStudents");

                    b.Property<int>("OtherItemTypeDetailId");

                    b.HasKey("M1MedicareLevyReductionOrExemptionId");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("M1MedicareLevyReductionOrExemptions");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.M2MedicareLevSurcharge", b =>
                {
                    b.Property<int>("M2MedicareLevSurchargeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasPrivateHospitalCoverForWholeYear");

                    b.Property<bool>("IsIncomeBelow90000OrFamilyIncomeBelow180000");

                    b.Property<int>("OtherItemTypeDetailId");

                    b.HasKey("M2MedicareLevSurchargeId");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("M2MedicareLevSurcharges");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.PrivateHealthInsurancePolicyDetails", b =>
                {
                    b.Property<int>("PrivateHealthInsurancePolicyDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AustralianGovernmentRebate");

                    b.Property<string>("BenefitCode");

                    b.Property<string>("FamilyStatus");

                    b.Property<string>("HealthInsurerCode");

                    b.Property<bool>("IsThisForSpouseOrSelf");

                    b.Property<int>("MembershipNumber");

                    b.Property<int>("OtherItemTypeDetailId");

                    b.Property<int>("PremiumsEligibleForAustralianGovernmentRebate");

                    b.HasKey("PrivateHealthInsurancePolicyDetailsId");

                    b.HasIndex("OtherItemTypeDetailId");

                    b.ToTable("PrivateHealthInsurancePolicyDetailses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.SpouseDetails", b =>
                {
                    b.Property<int>("SpouseDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildSupportSpousePaid");

                    b.Property<DateTime>("DOB");

                    b.Property<int>("ExemptPensionIncome");

                    b.Property<int>("FBNotUnder57A");

                    b.Property<int>("FBUnder57A");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<int>("GvernmentPensionsAndAllowance");

                    b.Property<bool>("HasSpouseForFullFY");

                    b.Property<string>("LastName");

                    b.Property<int>("NetInvestmentLoss");

                    b.Property<string>("OtherGivenNames");

                    b.Property<int>("OtherItemTypeDetailId");

                    b.Property<int>("ReportableSuperContribution");

                    b.Property<int>("SpouseTaxableIncome");

                    b.Property<int>("TaxFreeGovernmentPension");

                    b.Property<int>("TotalReportableFringeBenefitsAmount");

                    b.HasKey("SpouseDetailsId");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("SpouseDetailses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T10OtherNonRefundableTaxOffsets", b =>
                {
                    b.Property<int>("T10OtherNonRefundableTaxOffsetsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionCode");

                    b.Property<int>("OtherItemTypeDetailId");

                    b.Property<int>("TaxOffset");

                    b.HasKey("T10OtherNonRefundableTaxOffsetsId");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("T10OtherNonRefundableTaxOffsetses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T11OtherRefundableTaxOffsets", b =>
                {
                    b.Property<int>("T11OtherRefundableTaxOffsetsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("OtherItemTypeDetailId");

                    b.Property<int>("TaxOffSet");

                    b.HasKey("T11OtherRefundableTaxOffsetsId");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("T11OtherRefundableTaxOffsetses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T1SeniorsAndPensioners", b =>
                {
                    b.Property<int>("T1SeniorsAndPensionersId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OtherItemTypeDetailId");

                    b.Property<string>("SeniorTaxOffsetMaritalStatusCode");

                    b.Property<string>("VeteransOrSpouseOfVeterans");

                    b.HasKey("T1SeniorsAndPensionersId");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("T1SeniorsAndPensionerses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T2AustralianSuperannuationIncomeStream", b =>
                {
                    b.Property<int>("T2AustralianSuperannuationIncomeStreamId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("OtherItemTypeDetailId");

                    b.HasKey("T2AustralianSuperannuationIncomeStreamId");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("T2AustralianSuperannuationIncomeStreams");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T3SuperannuationContributionsOnBehalfOfYourSpouse", b =>
                {
                    b.Property<int>("T3SuperannuationContributionsOnBehalfOfYourSpouseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContributionPaid");

                    b.Property<int>("ContributionsOnBehalfOfSpouseTaxOffset");

                    b.Property<int>("OtherItemTypeDetailId");

                    b.HasKey("T3SuperannuationContributionsOnBehalfOfYourSpouseId");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("T3SuperannuationContributionsOnBehalfOfYourSpouses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T4ZoneOrOverseasForces", b =>
                {
                    b.Property<int>("T4ZoneOrOverseasForcesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<bool>("HasLivedInThisAreaMoreThan182Days");

                    b.Property<int>("OtherItemTypeDetailId");

                    b.HasKey("T4ZoneOrOverseasForcesId");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("T4ZoneOrOverseasForceses");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T6Dependent", b =>
                {
                    b.Property<int>("T6DependentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OtherItemTypeDetailId");

                    b.Property<int>("TaxOffSet");

                    b.HasKey("T6DependentId");

                    b.HasIndex("OtherItemTypeDetailId")
                        .IsUnique();

                    b.ToTable("T6Dependents");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.LodgementAggregate.IITRLodgement", b =>
                {
                    b.Property<int>("IITRLodgementId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FinancialYearId");

                    b.Property<int>("IndividualId");

                    b.Property<string>("LodgementStatus");

                    b.Property<int>("MainFormId");

                    b.HasKey("IITRLodgementId");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("IndividualId");

                    b.HasIndex("MainFormId")
                        .IsUnique();

                    b.ToTable("IITRLodgements");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.FinancialYear", b =>
                {
                    b.Property<int>("FinancialYearId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Year");

                    b.HasKey("FinancialYearId");

                    b.ToTable("FinancialYears");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionType", b =>
                {
                    b.Property<int>("DeductionTypeId");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.HasKey("DeductionTypeId");

                    b.ToTable("DeductionTypes");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDeductionTypeForm", b =>
                {
                    b.Property<int>("DeductionTypeFormId");

                    b.Property<int>("DeductionTypeId");

                    b.HasKey("DeductionTypeFormId", "DeductionTypeId");

                    b.HasIndex("DeductionTypeId");

                    b.ToTable("DeductionTypeDeductionTypeForms");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", b =>
                {
                    b.Property<int>("DeductionTypeDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DeductionDetailsFormId");

                    b.Property<int>("DeductionTypeId");

                    b.Property<double>("TotalAmount");

                    b.HasKey("DeductionTypeDetailId");

                    b.HasIndex("DeductionDetailsFormId");

                    b.HasIndex("DeductionTypeId");

                    b.ToTable("DeductionTypeDetails");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeType", b =>
                {
                    b.Property<int>("IncomeTypeId");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.HasKey("IncomeTypeId");

                    b.ToTable("IncomeTypes");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", b =>
                {
                    b.Property<int>("IncomeTypeDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IncomeDetailsFormId");

                    b.Property<int>("IncomeTypeId");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalTaxOffsetAmount");

                    b.HasKey("IncomeTypeDetailId");

                    b.HasIndex("IncomeDetailsFormId");

                    b.HasIndex("IncomeTypeId");

                    b.ToTable("IncomeTypeDetails");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeIncomeTypeForm", b =>
                {
                    b.Property<int>("IncomeTypeFormId");

                    b.Property<int>("IncomeTypeId");

                    b.HasKey("IncomeTypeFormId", "IncomeTypeId");

                    b.HasIndex("IncomeTypeId");

                    b.ToTable("IncomeTypeIncomeTypeForms");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemType", b =>
                {
                    b.Property<int>("OtherItemTypeId");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.HasKey("OtherItemTypeId");

                    b.ToTable("OtherItemTypes");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", b =>
                {
                    b.Property<int>("OtherItemTypeDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OtherItemDetailsFormId");

                    b.Property<int>("OtherItemTypeId");

                    b.HasKey("OtherItemTypeDetailId");

                    b.HasIndex("OtherItemDetailsFormId");

                    b.HasIndex("OtherItemTypeId");

                    b.ToTable("OtherItemTypeDetails");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeOtherItemForm", b =>
                {
                    b.Property<int>("OtherItemTypeFormId");

                    b.Property<int>("OtherItemTypeId");

                    b.HasKey("OtherItemTypeFormId", "OtherItemTypeId");

                    b.HasIndex("OtherItemTypeId");

                    b.ToTable("OtherItemTypeOtherItemTypeForms");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.TaxCompliance", b =>
                {
                    b.Property<int>("TaxComplianceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<int>("FinancialYearId");

                    b.HasKey("TaxComplianceId");

                    b.HasIndex("FinancialYearId");

                    b.ToTable("TaxCompliances");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.TaxRate", b =>
                {
                    b.Property<int>("TaxRateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("FinancialYearId");

                    b.Property<double>("Rate");

                    b.HasKey("TaxRateId");

                    b.HasIndex("FinancialYearId");

                    b.ToTable("TaxRates");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.Threshold", b =>
                {
                    b.Property<int>("ThresholdId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Max");

                    b.Property<int>("Min");

                    b.Property<int>("TaxComplianceId");

                    b.HasKey("ThresholdId");

                    b.HasIndex("TaxComplianceId")
                        .IsUnique();

                    b.ToTable("Thresholds");
                });

            modelBuilder.Entity("ET.Domain.Entities.Auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("ET.Domain.Entities.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ET.Domain.Entities.Auth.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.CustomerAggregate.Business", b =>
                {
                    b.HasOne("ET.Domain.Entities.Auth.User", "User")
                        .WithMany("Businesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.CustomerAggregate.Individual", b =>
                {
                    b.HasOne("ET.Domain.Entities.Auth.User", "AccountUser")
                        .WithMany("Individuals")
                        .HasForeignKey("AccountUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ET.Domain.Entities.Aggregate.CustomerAggregate.Business")
                        .WithMany("Individuals")
                        .HasForeignKey("BusinessId");

                    b.HasOne("ET.Domain.Entities.Aggregate.CustomerAggregate.Occupation", "Occupation")
                        .WithMany("Individuals")
                        .HasForeignKey("OccupationId");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.CustomerAggregate.Occupation", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.CustomerAggregate.OccupationCategory", "OccupationCategory")
                        .WithMany()
                        .HasForeignKey("OccupationCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.CustomerAggregate.OccupationCategoryDeductionType", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionType", "DeductionType")
                        .WithMany("OccupationCategoryDeductionTypes")
                        .HasForeignKey("DeductionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ET.Domain.Entities.Aggregate.CustomerAggregate.OccupationCategory", "OccupationCategory")
                        .WithMany("OccupationCategoryDeductionTypes")
                        .HasForeignKey("OccupationCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.CustomerAggregate.OccupationCategoryIncomeType", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeType", "IncomeType")
                        .WithMany("OccupationCategoryIncomeTypes")
                        .HasForeignKey("IncomeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ET.Domain.Entities.Aggregate.CustomerAggregate.OccupationCategory", "OccupationCategory")
                        .WithMany("OccupationCategoryIncomeTypes")
                        .HasForeignKey("OccupationCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.BasicDetailsForm", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.MainForm", "MainForm")
                        .WithOne("BasicDetailsForm")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.BasicDetailsForm", "MainFormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.DeductionDetailsForm", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.MainForm", "MainForm")
                        .WithOne("DeductionDetailsForm")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.DeductionDetailsForm", "MainFormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.DeductionTypeForm", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.MainForm", "MainForm")
                        .WithOne("DeductionTypeForm")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.DeductionTypeForm", "MainFormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.IncomeDetailsForm", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.MainForm", "MainForm")
                        .WithOne("IncomeDetailsForm")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.IncomeDetailsForm", "MainFormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.IncomeTypeForm", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.MainForm", "MainForm")
                        .WithOne("IncomeTypeForm")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.IncomeTypeForm", "MainFormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.OtherItemDetailsForm", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.MainForm", "MainForm")
                        .WithOne("OtherItemDetailsForm")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.OtherItemDetailsForm", "MainFormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.OtherItemTypeForm", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.MainForm", "MainForm")
                        .WithOne("OtherItemTypeForm")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.OtherItemTypeForm", "MainFormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.ComputerLaptopForWork", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithMany("ComputerLaptopForWork")
                        .HasForeignKey("DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D10CostOfTaxAffairs", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("D10CostOfTaxAffairs")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D10CostOfTaxAffairs", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D11DeductibleAmountOfUndeductedPurchasePriceOfForeignPensionOrAnnuity", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("D11DeductibleAmountOfUndeductedPurchasePriceOfForeignPensionOrAnnuity")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D11DeductibleAmountOfUndeductedPurchasePriceOfForeignPensionOrAnnuity", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D12PersonalSuperannuationContributions", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithMany("D12PersonalSuperannuationContributions")
                        .HasForeignKey("DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D13DeductionForProjectPool", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("D13DeductionForProjectPool")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D13DeductionForProjectPool", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D14ForestryManagedInvestmentSchemeDeduction", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("D14ForestryManagedInvestmentSchemeDeduction")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D14ForestryManagedInvestmentSchemeDeduction", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D15OtherDeductions", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithMany("D15OtherDeductions")
                        .HasForeignKey("DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D1WorkRelatedCarExpenses", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("D1WorkRelatedCarExpenses")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D1WorkRelatedCarExpenses", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D2WorkRelatedTravelExpenses", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithMany("D2WorkRelatedTravelExpenses")
                        .HasForeignKey("DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D3WorkRelatedUniformClothingLaundryDryCleaning", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("D3WorkRelatedUniformClothingLaundryDryCleaning")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D3WorkRelatedUniformClothingLaundryDryCleaning", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D4WorkRelatedSelfEducationExpenses", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("D4WorkRelatedSelfEducationExpenses")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D4WorkRelatedSelfEducationExpenses", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D9GiftsOrDonations", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("D9GiftsOrDonations")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.D9GiftsOrDonations", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.DividendDeduction", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("DividendDeduction")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.DividendDeduction", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.HomeOfficeExpense", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithMany("HomeOfficeExpense")
                        .HasForeignKey("DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.HomeOfficeOccupancyCosts", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("HomeOfficeOccupancyCosts")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.HomeOfficeOccupancyCosts", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.InterestDeduction", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("InterestDeduction")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.InterestDeduction", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.InternetAccessExpense", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("InternetAccessExpense")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.InternetAccessExpense", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.LowValuePoolDeduction", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("LowValuePoolDeduction")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.LowValuePoolDeduction", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.MobilePhoneExpense", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("MobilePhoneExpense")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.MobilePhoneExpense", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.OtherWorkRelatedExpenses", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithMany("OtherWorkRelatedExpenses")
                        .HasForeignKey("DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.ParkAndTolls", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("ParkAndTolls")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.ParkAndTolls", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.SunProtection", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("SunProtection")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.SunProtection", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.ToolAndEquipment", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("ToolAndEquipment")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.ToolAndEquipment", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.UnionFees", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", "DeductionTypeDetail")
                        .WithOne("UnionFees")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.DeductionTypeDetailModels.UnionFees", "DeductionTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.AAASIS", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("Aaasis")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.AAASIS", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.AGA", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("Aga")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.AGA", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.AGP", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("Agp")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.AGP", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.Allowance", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithMany("Allowances")
                        .HasForeignKey("IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.APSI", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("Apsi")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.APSI", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.ASLSP", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithMany("Aslsps")
                        .HasForeignKey("IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.BankInterest", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("BankInterest")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.BankInterest", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.BFLICAFS", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("Bflicafs")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.BFLICAFS", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.CapitalGainOrLosses", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("CapitalGainOrLosses")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.CapitalGainOrLosses", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.DeferredNonCommercialBusinessLosses", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("DeferredNonCommercialBusinessLosses")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.DeferredNonCommercialBusinessLosses", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.Dividends", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("Dividends")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.Dividends", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.ELSP", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithMany("Elsps")
                        .HasForeignKey("IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.EmployeeShareSchemes", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("EmployeeShareSchemes")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.EmployeeShareSchemes", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.ETP", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithMany("Etps")
                        .HasForeignKey("IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.FMISI", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("Fmisi")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.FMISI", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.ForeignEntities", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("ForeignEntities")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.ForeignEntities", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.ForeignSourceIncome", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("ForeignSourceIncome")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.ForeignSourceIncome", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.NetFarmManagementDepositOrRepayments", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("NetFarmManagementDepositOrRepayments")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.NetFarmManagementDepositOrRepayments", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.NetIncomeOrLossFromBusiness", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("NetIncomeOrLossFromBusiness")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.NetIncomeOrLossFromBusiness", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.NonIndividualPaymentSummary", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithMany()
                        .HasForeignKey("IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P1PersonalServicesIncome")
                        .WithMany("NonIndividualPaymentSummaries")
                        .HasForeignKey("P1PersonalServicesIncomeId");
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.OtherIncome", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("OtherIncome")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.OtherIncome", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P10SmallBusinessEntityDepreciatingAssets", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P10SmallBusinessEntityDepreciatingAssets")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P10SmallBusinessEntityDepreciatingAssets", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P11TradeDebtors", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P11TradeDebtors")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P11TradeDebtors", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P12TradeCreditors", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P12TradeCreditors")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P12TradeCreditors", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P13TotalSalaryAndWageExpenses", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P13TotalSalaryAndWageExpenses")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P13TotalSalaryAndWageExpenses", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P14PaymentsToAssociatedPersons", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P14PaymentsToAssociatedPersons")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P14PaymentsToAssociatedPersons", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P15IntangibleDepreciatingAssetsFirstDeducted", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P15IntangibleDepreciatingAssetsFirstDeducted")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P15IntangibleDepreciatingAssetsFirstDeducted", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P16OtherDepreciatingAssetsFirstDeducted", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P16OtherDepreciatingAssetsFirstDeducted")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P16OtherDepreciatingAssetsFirstDeducted", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P17TerminationValueOfIntangibleDepreciatingAsset", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P17TerminationValueOfIntangibleDepreciatingAsset")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P17TerminationValueOfIntangibleDepreciatingAsset", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P18TerminationValueOfOtherDepreciatingAssets", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P18TerminationValueOfOtherDepreciatingAssets")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P18TerminationValueOfOtherDepreciatingAssets", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P19TradingStockElection", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P19TradingStockElection")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P19TradingStockElection", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P1PersonalServicesIncome", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P1PersonalServicesIncome")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P1PersonalServicesIncome", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P2DescriptionOfMainBusinessOrProfessionalActivity", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P2DescriptionOfMainBusinessOrProfessionalActivity")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P2DescriptionOfMainBusinessOrProfessionalActivity", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P4StatusOfBusiness", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P4StatusOfBusiness")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P4StatusOfBusiness", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P5BusinessNameOfMainBusinessAndABN", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P5BusinessNameOfMainBusinessAndAbn")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P5BusinessNameOfMainBusinessAndABN", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P7GSTByInternet", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P7GstByInternet")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P7GSTByInternet", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P8BusinessIncomeAndExpensesFarming", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P8BusinessIncomeAndExpensesFarming")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P8BusinessIncomeAndExpensesFarming", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P8BusinessIncomeAndExpensesNonFarming", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P8BusinessIncomeAndExpensesNonFarming")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P8BusinessIncomeAndExpensesNonFarming", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P9BusinessLossActivity", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("P9BusinessLossActivity")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.P9BusinessLossActivity", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.PartnershipsAndTrusts", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("PartnershipsAndTrusts")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.PartnershipsAndTrusts", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.PAYGSummary", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithMany("PaygSummaries")
                        .HasForeignKey("IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.PersonalServiceIncome", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("PersonalServiceIncome")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.PersonalServiceIncome", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.Rent", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", "IncomeTypeDetail")
                        .WithOne("Rent")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.IncomeTypeDetailModels.Rent", "IncomeTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.A1Under18", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("A1Under18")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.A1Under18", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.A2PartYearTaxFreeThreshold", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("A2PartYearTaxFreeThreshold")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.A2PartYearTaxFreeThreshold", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.A3SuperCoContribution", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("A3SuperCoContribution")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.A3SuperCoContribution", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.A4WorkingHolidayMakerNetIncome", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("A4WorkingHolidayMakerNetIncome")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.A4WorkingHolidayMakerNetIncome", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.DependencyChildren", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("DependencyChildren")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.DependencyChildren", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.IncomeTests", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("IncomeTests")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.IncomeTests", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.L1TaxLossesOfEarlierIncomeYearsClaimedThisIncomeYear", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("L1TaxLossesOfEarlierIncomeYearsClaimedThisIncomeYear")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.L1TaxLossesOfEarlierIncomeYearsClaimedThisIncomeYear", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.M1MedicareLevyReductionOrExemption", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("M1MedicareLevyReductionOrExemption")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.M1MedicareLevyReductionOrExemption", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.M2MedicareLevSurcharge", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("M2MedicareLevSurcharge")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.M2MedicareLevSurcharge", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.PrivateHealthInsurancePolicyDetails", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithMany("PrivateHealthInsurancePolicyDetails")
                        .HasForeignKey("OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.SpouseDetails", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("SpouseDetails")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.SpouseDetails", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T10OtherNonRefundableTaxOffsets", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("T10OtherNonRefundableTaxOffsets")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T10OtherNonRefundableTaxOffsets", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T11OtherRefundableTaxOffsets", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("T11OtherRefundableTaxOffsets")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T11OtherRefundableTaxOffsets", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T1SeniorsAndPensioners", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("T1SeniorsAndPensioners")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T1SeniorsAndPensioners", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T2AustralianSuperannuationIncomeStream", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("T2AustralianSuperannuationIncomeStream")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T2AustralianSuperannuationIncomeStream", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T3SuperannuationContributionsOnBehalfOfYourSpouse", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("T3SuperannuationContributionsOnBehalfOfYourSpouse")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T3SuperannuationContributionsOnBehalfOfYourSpouse", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T4ZoneOrOverseasForces", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("T4ZoneOrOverseasForces")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T4ZoneOrOverseasForces", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T6Dependent", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", "OtherItemTypeDetail")
                        .WithOne("T6Dependent")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.FormAggregate.IITR.TypeDetailModels.OtherItemTypeDetailModels.T6Dependent", "OtherItemTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.LodgementAggregate.IITRLodgement", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.FinancialYear", "FinancialYear")
                        .WithMany("Lodgements")
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ET.Domain.Entities.Aggregate.CustomerAggregate.Individual", "Individual")
                        .WithMany("Lodgements")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.MainForm", "MainForm")
                        .WithOne("IITRLodgement")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.LodgementAggregate.IITRLodgement", "MainFormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDeductionTypeForm", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.DeductionTypeForm", "DeductionTypeForm")
                        .WithMany("DeductionTypeDeductionTypeForms")
                        .HasForeignKey("DeductionTypeFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionType", "DeductionType")
                        .WithMany("DeductionTypeDeductionTypeForms")
                        .HasForeignKey("DeductionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionTypeDetail", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.DeductionDetailsForm")
                        .WithMany("DeductionTypeDetails")
                        .HasForeignKey("DeductionDetailsFormId");

                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.DeductionType", "DeductionType")
                        .WithMany("DeductionTypeDetails")
                        .HasForeignKey("DeductionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeDetail", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.IncomeDetailsForm")
                        .WithMany("IncomeTypeDetails")
                        .HasForeignKey("IncomeDetailsFormId");

                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeType", "IncomeType")
                        .WithMany("IncomeTypeDetails")
                        .HasForeignKey("IncomeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeTypeIncomeTypeForm", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.IncomeTypeForm", "IncomeTypeForm")
                        .WithMany("IncomeTypeIncomeTypeForms")
                        .HasForeignKey("IncomeTypeFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.IncomeType", "IncomeType")
                        .WithMany("IncomeTypeIncomeTypeForms")
                        .HasForeignKey("IncomeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeDetail", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.OtherItemDetailsForm")
                        .WithMany("OtherItemTypeDetails")
                        .HasForeignKey("OtherItemDetailsFormId");

                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemType", "OtherItemType")
                        .WithMany("OtherItemTypeDetails")
                        .HasForeignKey("OtherItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemTypeOtherItemForm", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.FormAggregate.IITR.Forms.OtherItemTypeForm", "OtherItemTypeForm")
                        .WithMany("OtherItemTypeOtherItemForms")
                        .HasForeignKey("OtherItemTypeFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.IITR.OtherItemType", "OtherItemType")
                        .WithMany("OtherItemTypeOtherItemForms")
                        .HasForeignKey("OtherItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.TaxCompliance", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.FinancialYear", "FinancialYear")
                        .WithMany("TaxCompliances")
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.TaxRate", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.FinancialYear", "FinancialYear")
                        .WithMany("TaxRates")
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Aggregate.TaxationAggregate.Threshold", b =>
                {
                    b.HasOne("ET.Domain.Entities.Aggregate.TaxationAggregate.TaxCompliance", "TaxCompliance")
                        .WithOne("Threshold")
                        .HasForeignKey("ET.Domain.Entities.Aggregate.TaxationAggregate.Threshold", "TaxComplianceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ET.Domain.Entities.Auth.UserRole", b =>
                {
                    b.HasOne("ET.Domain.Entities.Auth.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ET.Domain.Entities.Auth.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ET.Domain.Entities.Auth.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ET.Domain.Entities.Auth.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ET.Domain.Entities.Auth.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ET.Domain.Entities.Auth.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
